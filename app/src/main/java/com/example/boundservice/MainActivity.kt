package com.example.boundservice

import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.ServiceConnection
import android.os.Bundle
import android.os.IBinder
import android.util.Log
import android.view.View
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.Button
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.Observer
import com.example.boundservice.ui.theme.BoundServiceTheme
import java.lang.Exception

class MainActivity : ComponentActivity() {
    // Instance of Service
    var mService: MyBoundService? = null

    // Boolean to check if our activity is bound to service or not
    var mIsBound = mutableStateOf(false)

    // Generated number
    var number = mutableStateOf(0)

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            BoundServiceTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colors.background
                ) {
                    Column(
                        verticalArrangement = Arrangement.SpaceEvenly,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Greeting(number.value.toString())
                        if (mIsBound.value) {
                            Text(text = "Service is bound")
                        } else {
                            Text(text = "Service is not bound")
                        }
                        Button(onClick = { bindService() }) {
                            Text(text = "Start Service")
                        }
                        Button(onClick = {
                            if (mIsBound.value) {
                                unbindService()
                                mIsBound.value = false
                            }
                        }) {
                            Text(text = "Stop Service")
                        }
                    }
                }
            }
        }
    }

    /**
     * Interface for getting the instance of binder from our service class
     * So client can get instance of our service class and can directly communicate with it.
     */
    private val serviceConnection = object : ServiceConnection {
        /**
         * Is called when the service is bound
         */
        override fun onServiceConnected(className: ComponentName, iBinder: IBinder) {
            println("Service is connected")
            try {
                // We've bound to MyService, cast the IBinder and get MyBinder instance
                val binder = iBinder as MyBoundService.MyBinder
                mService = binder.service
                mIsBound.value = true
                getRandomNumberFromService() // return a random number from the service
            } catch (e: Exception) {
                println(e)
            }
        }

        /**
         * Is called when the service is disconnected
         */
        override fun onServiceDisconnected(arg0: ComponentName) {
            mIsBound.value = false
        }
    }

    /**
     * Method for listening to random numbers generated by our service class
     */
    private fun getRandomNumberFromService() {
        mService?.randomNumberLiveData?.observe(this, Observer {
            number.value = it
        })
    }

    override fun onDestroy() {
        super.onDestroy()
        // Unbinding to the service class
        unbindService()
    }

    /**
     * Used to bind to our service class
     */
    private fun bindService() {
        Intent(this, MyBoundService::class.java).also { intent ->
            bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)
        }
    }

    /**
     * Used to unbind and stop our service class
     */
    private fun unbindService() {
        Intent(this, MyBoundService::class.java).also { intent ->
            unbindService(serviceConnection as ServiceConnection)
        }
    }
}

@Composable
fun Greeting(name: String) {
    Text(text = "Number:  $name!")
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    BoundServiceTheme {
        Greeting("Android")
    }
}